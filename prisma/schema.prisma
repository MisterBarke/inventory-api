// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String     @unique
  name          String?
  password      String
  createdAt     DateTime   @default(now())
  refresh_token String?
  role          Role
  items         Items[]
  category      Categories[]
  history       History[]
  companyId  String?   @db.ObjectId
  company    Company?  @relation(fields: [companyId], references: [id])
  sales         Sales[]
  invoices      Invoices[]
}

model Company {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  users     Users[]
}

model Items {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  quantity    Int?
  unitPrice   Int?
  itemsTotal  Int?
  createdAt   DateTime  @default(now())
  createdById String    @db.ObjectId
  createdBy   Users     @relation(fields: [createdById], references: [id])
  updatedAt   DateTime  @updatedAt
  category    Categories? @relation(fields: [categoryId], references: [id])
  categoryId  String?   @db.ObjectId
  history        History[]
  sale        SalesItems[]
}

model Categories {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  total       Int?
  createdBy   Users    @relation(fields: [createdById], references: [id])
  createdById String   @db.ObjectId
  updatedAt   DateTime @updatedAt
  items       Items[]
  history     History[]
}

model Sales {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  sellerId    String     @db.ObjectId
  custumerName String
  custumerAddress String
  seller      Users      @relation(fields: [sellerId], references: [id])
  items       SalesItems[]       // Liste des produits vendus
  totalAmount Int
  discount    Int?
  createdAt   DateTime   @default(now())
  invoice     Invoices?
  delivery    Deliveries?
}

model SalesItems {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  saleId   String  @db.ObjectId
  itemId   String  @db.ObjectId
  quantity Int
  sale     Sales   @relation(fields: [saleId], references: [id], onDelete: Cascade)
  item     Items   @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Invoices {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  saleId      String   @unique @db.ObjectId
  sale        Sales     @relation(fields: [saleId], references: [id])
  sellerId    String   @db.ObjectId
  seller      Users    @relation(fields: [sellerId], references: [id])
  totalAmount Int
  discount    Int?
  finalAmount Int
  taxAmount   Int?
  createdAt   DateTime @default(now())
}

model Deliveries {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  saleId      String   @unique @db.ObjectId
  sale        Sales     @relation(fields: [saleId], references: [id])
  status      DeliveryStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deliveryMan String
  location    String
}

model History {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  itemId      String?   @db.ObjectId
  categoryId  String?   @db.ObjectId
  quantity    Int?
  userId      String   @db.ObjectId 
  createdAt   DateTime @default(now())
  item        Items?    @relation(fields: [itemId], references: [id])
  category    Categories?    @relation(fields: [categoryId], references: [id])
  user        Users    @relation(fields: [userId], references: [id])
  action      HistoryAction
  oldValue    Json
  newValue    Json
}

enum DeliveryStatus {
  PENDING     // En attente d’un livreur
  IN_PROGRESS // En cours de livraison
  DELIVERED   // Livraison terminée
}

enum HistoryAction {
  SOLD    
  DELETED 
  UPDATED   
  REMOVEDFROMSTOCK
  ADDEDTOSTOCK
  ADDEDNEW
  DELIVERY
}

enum Role {
  SELLER //Simple utilisateur
  ADMIN //Admin
  SUDO //Développeur
  DELIVERY  // Livreur
}
