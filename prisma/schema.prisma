// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  email         String     @unique
  name          String?
  password      String
  createdAt     DateTime   @default(now())
  refresh_token String?
  role          Role
  items         Items[]
  category      Categories[]
  history       History[]
}

model Items {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  quantity    Int?
  unitPrice   Int?
  itemsTotal  Int?
  createdAt   DateTime  @default(now())
  createdById String    @db.ObjectId
  createdBy   Users     @relation(fields: [createdById], references: [id])
  updatedAt   DateTime  @updatedAt
  category    Categories? @relation(fields: [categoryId], references: [id])
  categoryId  String?   @db.ObjectId
  history        History[]
}

model Categories {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   @unique
  createdBy   Users    @relation(fields: [createdById], references: [id])
  createdById String   @db.ObjectId
  updatedAt   DateTime @updatedAt
  items       Items[]
  total       Int?
  history     History[]
}

model History {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  itemId      String?   @db.ObjectId
  categoryId  String?   @db.ObjectId
  quantity    Int?
  userId      String   @db.ObjectId 
  createdAt   DateTime @default(now())
  item        Items?    @relation(fields: [itemId], references: [id])
  category    Categories?    @relation(fields: [categoryId], references: [id])
  user        Users    @relation(fields: [userId], references: [id])
  action      String
  oldValue    Json
  newValue    Json
}


enum Role {
  USER //Simple utilisateur
  ADMIN //Admin
  SUDO //DÃ©veloppeur
}
